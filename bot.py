"""
—Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import os
from datetime import datetime
from telebot import types
import threading
import functions
import loopWork
import dataBase
import pg_connect
import telebot
import args

print("------------------------–ù–ê–ß–ê–õ–ê–°–¨ –ó–ê–ì–†–£–ó–ö–ê –ë–û–¢–ê------------------------")
bot = telebot.TeleBot(token=args.token)
dataBase.create_tables()
dataBase.upd_prof()
dataBase.upd_quests()
args.bot = bot
nickList = []
createCorpList = []
descriptionList = []
nameOfCorpList = []
avatarList = []
print(bot.get_me())
args.start_time = datetime.now()
print("------------------------–ó–ê–ö–û–ù–ß–ò–õ–ê–°–¨ –ó–ê–ì–†–£–ó–ö–ê –ë–û–¢–ê------------------------")


@bot.message_handler(commands=['start'])
def handler_start(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        key1 = types.InlineKeyboardMarkup()
        key1.add(types.InlineKeyboardButton(text=args.helpButtonName, callback_data='0'))
        try:
            bot.send_sticker(message.from_user.id, args.hello)
        except Exception as e:
            functions.error_log(e)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–£–∑–Ω–∞—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>',
                         reply_markup=key1)
        contain = False
        connect, cursor = pg_connect.connect()
        cursor.execute("SELECT ID FROM Users")
        res = cursor.fetchall()
        for i in range(len(res)):
            if res[i][0] == message.from_user.id:
                contain = True
                break
        if not contain:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text=args.test_question)
            try:
                mess = message.text.split()
                res = mess[1]
            except Exception as e:
                functions.error_log(e)
                res = 0
            data = [message.from_user.id, "None", "None", "None", str(args.waitStatus),
                    "None", 0, 0, "0", 0, 0, 0, 0, "None"]
            cursor.execute('INSERT INTO Users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', data)
            data = [message.from_user.id, message.from_user.username,
                    str(datetime.now().strftime('%d-%m-%Y %H:%M:%S')), res, 0]
            cursor.execute('INSERT INTO HiddenInfo VALUES(?, ?, ?, ?, ?)', data)
        connect.commit()
        cursor.close()
        connect.close()
    except Exception as e:
        functions.error_log(e)


def handler_help(message):  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –º–µ–Ω—é –ø–æ–º–æ—â–∏
    """
    try:
        functions.log(message)
        markup = inline_keyboard(message.from_user.id, False, False, False, True, False)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                         text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=markup)
    except Exception as e:
        functions.error_log(e)


def corp_help(user_id):  # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏ –æ—Ä–≥
    """
    :param user_id: user_id
    :return: –º–µ–Ω—é –ø–æ–º–æ—â–∏ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    """
    try:
        markup = inline_keyboard(user_id, False, False, False, False, True)
        bot.send_message(parse_mode='HTML', chat_id=user_id,
                         text='<b>–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>', reply_markup=markup)
    except Exception as e:
        functions.error_log(e)


def inline_keyboard(user_id, corp_menu: bool, me_menu: bool, admin: bool, main_menu: bool, corp_set: bool):
    """
    :param user_id: user_id
    :param corp_menu: True/False
    :param me_menu: True/False
    :param admin: True/False
    :param main_menu: True/False
    :param corp_set: True/False
    :return: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    try:
        markup = types.InlineKeyboardMarkup()
        if main_menu:
            key1 = types.InlineKeyboardButton('üìù–í—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ', callback_data='/give_tsk')
            key2 = types.InlineKeyboardButton('üôá‚Äç‚ôÇÔ∏è–°–æ–∑–¥–∞—Ç—å –∞–≤–∞—Ç–∞—Ä', callback_data='/crt_avatar')
            markup.add(key1)
            markup.add(key2)
        elif corp_menu:
            if dataBase.is_owner(user_id):
                key1 = types.InlineKeyboardButton('‚ùå–†–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å', callback_data='/remove_corp')
                key2 = types.InlineKeyboardButton('üîÅ–ü–µ—Ä–µ–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏–µ', callback_data='/change_owner')
                key3 = types.InlineKeyboardButton('üì©–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', callback_data='/toorginvite')
                key4 = types.InlineKeyboardButton('üôéüèø‚Äç‚ôÇÔ∏è–°–æ—Å—Ç–∞–≤', callback_data='/corp_members')
                key5 = types.InlineKeyboardButton('üìù–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è', callback_data='/get_task')
                key6 = types.InlineKeyboardButton('‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', callback_data='/corp_settings')
                markup.add(key1)
                markup.add(key2)
                markup.add(key3)
                markup.add(key4)
                markup.add(key5)
                markup.add(key6)
            else:
                key1 = types.InlineKeyboardButton('‚ùå–ü–æ–∫–∏–Ω—É—Ç—å', callback_data='/leave_corp')
                markup.add(key1)
        elif me_menu:
            key1 = types.InlineKeyboardButton('üîó–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞', callback_data='/ref')
            key2 = types.InlineKeyboardButton('‚úè–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º', callback_data='/change_nickname')
            key3 = types.InlineKeyboardButton('‚úè–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', callback_data='/change_spec')
            key4 = types.InlineKeyboardButton('‚úè–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é', callback_data='/change_prof')
            markup.add(key1)
            markup.add(key2)
            markup.add(key3)
            markup.add(key4)
        elif corp_set:
            if dataBase.in_corp(user_id):
                key1 = types.InlineKeyboardButton('‚úè–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='/change_descr')
                key2 = types.InlineKeyboardButton('‚úè–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data='/change_nameCorp')
                markup.add(key1)
                markup.add(key2)
            else:
                key3 = types.InlineKeyboardButton('üìå–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', callback_data='/crt_org')
                markup.add(key3)
        elif admin:
            key1 = types.InlineKeyboardButton('–õ–æ–≥–∏', callback_data='/log')
            key2 = types.InlineKeyboardButton('–û—à–∏–±–∫–∏', callback_data='/errors')
            key3 = types.InlineKeyboardButton('–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã', callback_data='/uptime')
            key4 = types.InlineKeyboardButton('–ë–∞–∑–∞ –¥–∞–Ω—ã—Ö', callback_data='/db')
            key5 = types.InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞', callback_data='/exit')
            markup.add(key1, key2)
            markup.add(key3, key4)
            markup.add(key5)
        else:
            user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
            user_markup.row(args.AboutMeButtonName, args.TopsButtonName)
            user_markup.row(args.helpButtonName, args.CorpMenuButtonName)
            if functions.is_admin(user_id):
                user_markup.row(args.AhelpButtonName)
            return user_markup
        return markup
    except Exception as e:
        print(e)


def handler_corp_menu(message):  # –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –º–µ–Ω—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    """
    try:
        msg = dataBase.corp_info(message.from_user.id)
        if msg == '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏':
            markup = None
        else:
            markup = inline_keyboard(message.from_user.id, True, False, False, False, False)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                         text=msg, reply_markup=markup)
    except Exception as e:
        functions.error_log(e)


def handler_log(message):  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –±–æ—Ç–∞
    """
    try:
        if functions.is_admin(message.from_user.id):
            doc = open(args.filesFolderName + args.logFileName, 'rb')
            bot.send_document(message.from_user.id, doc)
    except Exception as e:
        functions.error_log(e)


def handler_error(message):  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Ñ–∞–π–ª –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
    """
    try:
        if functions.is_admin(message.from_user.id):
            doc = open(args.filesFolderName + args.ErlogFileName, 'rb')
            bot.send_document(message.from_user.id, doc)
    except Exception as e:
        functions.error_log(e)


def handler_db(message):  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
    """
    try:
        functions.log(message)
        if functions.is_admin(message.from_user.id):
            doc = open(args.filesFolderName + args.databaseName, 'rb')
            bot.send_document(message.from_user.id, doc)
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(commands=['change_db'])  # –∑–∞–º–µ–Ω–∏—Ç—å –±–¥
def handler_change_db(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –∑–∞–º–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        functions.log(message)
        args.change_db.append(message.from_user.id)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>')
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(commands=['add_quest'])  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤
def handler_add_quest(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        functions.log(message)
        data = message.text.split(' , ')
        data.pop(0)
        dataBase.add_quest(data)
        dataBase.upd_quests()
        dataBase.upd_prof()
    except Exception as e:
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–û–®–ò–ë–ö–ê: –í–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ '
                                                                               '—Ç—Ä–µ–±—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b>')
        functions.error_log(e)


def handler_give_task(message):  # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ –∑–∞–¥–∞–Ω–∏—è
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        functions.log(message)
        msg, markup = dataBase.get_workers(message.from_user.id)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                         text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º—É –¥–∞—Ç—å –¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ:\n</b>' + msg, reply_markup=markup)
    except Exception as e:
        functions.error_log(e)


def handler_accept(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        if dataBase.can_accept(message.from_user.id):
            if dataBase.is_free(message.from_user.id):
                if dataBase.is_corp_task(message.from_user.id):
                    dataBase.upd_is_corp_task(message.from_user.id, 0)
                    dataBase.upd_corp_count_works(dataBase.get_corp(message.from_user.id))
                job_timer = dataBase.get_job_timer(message.from_user.id)
                dataBase.start_job(message.from_user.id, args.workStatus,
                                   (int(datetime.now().strftime('%M')) + job_timer) % 60)
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<i>–í—ã –ù–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è —ç—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ</i> <b>' + str(
                                     job_timer) + '</b> <i> –º–∏–Ω</i>')
                return True
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>OOPS\n–í—ã –∑–∞–Ω—è—Ç—ã —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º</b>')
                return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>OOPS</b>\n–ö–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å')
            return False
    except Exception as e:
        functions.error_log(e)


def handler_cancel(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        if dataBase.can_accept(message.from_user.id):
            dataBase.upd_can_accept(message.from_user.id, 0)
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è</b>')
            return True
        else:
            return False
    except Exception as e:
        functions.error_log(e)


def handler_exit(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    try:
        if functions.is_admin(message.from_user.id):
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<i>–í—ã—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –≤ –æ–∫–Ω–æ</i>')
            os.abort()
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<i>–í—ã—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –≤ –æ–∫–Ω–æ</i>')
    except Exception as e:
        functions.error_log(e)


def handler_invite(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å–æ—Å—Ç–æ—è—â–∏—Ö –≤ –æ—Ä–≥
    """
    try:
        functions.log(message)
        if dataBase.is_owner(message.from_user.id):
            company = dataBase.get_corp(message.from_user.id)
            corp_name = dataBase.get_corp_name(dataBase.get_corp(message.from_user.id))
            try:
                user_id = int(message.text[7:])
            except AttributeError:
                user_id = int(message.data[7:])
            if dataBase.check_requests(user_id, company):
                if not dataBase.in_corp(user_id):
                    bot.send_message(parse_mode='HTML', chat_id=int(user_id),
                                     text='–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é "{}"'.format(corp_name))
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ <b>{}</b> –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é '.format(
                                         dataBase.get_nickname(user_id)))
                    dataBase.new_req(user_id, company)
                    msg, markup = dataBase.get_request(user_id)
                    bot.send_message(parse_mode='HTML', chat_id=int(user_id),
                                     text='<b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:\n</b>' + msg, reply_markup=markup)
                    return True
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                    return False
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</b>')
                return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
            return False
    except Exception as e:
        functions.error_log(e)


def handler_kick(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        if dataBase.is_owner(message.from_user.id):
            try:
                user_id = int(message.text[5:])
            except AttributeError:
                user_id = int(message.data[5:])
            try:
                if int(user_id) != int(message.from_user.id):
                    if dataBase.in_corp(user_id):
                        bot.send_message(parse_mode='HTML', chat_id=user_id,
                                         text='<b>–í–∞—Å –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                         text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                        dataBase.kick_from_corp(user_id)
                        return True
                    else:
                        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                         text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                        return False
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<b–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                    return False
            except Exception as e:
                functions.error_log(e)
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–í—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
            return False
    except Exception as e:
        functions.error_log(e)


def handler_set_owner(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ—Ä–≥
    """
    try:
        functions.log(message)
        if dataBase.is_owner(message.from_user.id):
            try:
                user_id = int(message.text[10:])
            except AttributeError:
                user_id = int(message.data[10:])
            try:
                if int(user_id) != int(message.from_user.id):
                    if dataBase.in_corp(user_id):
                        bot.send_message(parse_mode='HTML', chat_id=user_id,
                                         text='<b>–í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ </b>' +
                                              dataBase.get_corp_name(dataBase.get_corp(user_id)))
                        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                         text='<b>–í–ª–∞–¥–µ–ª–µ—Ü —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω</b>')
                        dataBase.set_owner(message.from_user.id, 0)
                        dataBase.set_owner(user_id, 1)
                        return True
                    else:
                        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                         text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                        return False
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<b–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º</b>')
                    return False
            except Exception as e:
                functions.error_log(e)
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º</b>')
                return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–í—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
            return False
    except Exception as e:
        functions.error_log(e)


def handler_leave(message):  # —Ñ—É–Ω–∫—Ü–∏—è —É—Ö–æ–¥–∞ –∏–∑ –æ—Ä–≥
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        if dataBase.in_corp(message.from_user.id):
            owner = int(dataBase.get_owner(dataBase.get_corp(message.from_user.id)))
            company = dataBase.get_corp_name(dataBase.get_corp(message.from_user.id))
            if dataBase.leave_corp(message.from_user.id):
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</b> <i>{0}</i>'.format(str(company)))
                bot.send_message(parse_mode='HTML', chat_id=owner,
                                 text='<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –ø–æ–∫–∏–Ω—É–ª –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</b> <i>{1}</i>'.
                                 format(dataBase.get_nickname(message.from_user.id), company))
                return True
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é</b>')
                return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
            return False
    except Exception as e:
        functions.error_log(e)


def handler_create_corp(message):  # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        if dataBase.get_user_rank(message.from_user.id) >= args.maxrank:
            if not dataBase.in_corp(message.from_user.id):
                if int(dataBase.get_balance(message.from_user.id)[:-1]) >= args.corp_cost:
                    try:
                        name = message.text
                        dataBase.create_corp(message.from_user.id, name)
                        dataBase.set_owner(message.from_user.id, 1)
                        dataBase.minus_money(message.from_user.id, args.corp_cost)
                        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                         text='<i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</i> <b>' + name + '</b> <i>—É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</i>')
                    except Exception as e:
                        functions.error_log(e)
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è</i> <b>' + str(args.corp_cost) +
                                          str(args.currency) + '</b>')
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>OOPS\n–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç–∏–≥—à–∏–π –¥–∑–µ–Ω–∞</b>')
    except Exception as e:
        functions.error_log(e)


def handler_set_desc(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        res = dataBase.update_corp_description(message.from_user.id, message.text)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text=res)
    except Exception as e:
        functions.error_log(e)


def handler_set_name(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        res = dataBase.update_corp_name(message.from_user.id, message.text)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text=res)
    except Exception as e:
        functions.error_log(e)


def handler_task(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        worker_id = int(message.data[5:])
        if worker_id != message.from_user.id:
            if dataBase.is_free(worker_id):
                if worker_id != dataBase.get_last_worker(message.from_user.id):
                    markup = types.InlineKeyboardMarkup()
                    key1 = types.InlineKeyboardButton(args.acceptWorkButton, callback_data='1')
                    key2 = types.InlineKeyboardButton(args.cancelWorkButton, callback_data='2')
                    markup.add(key1)
                    markup.add(key2)
                    task_ = dataBase.get_task(worker_id)
                    dataBase.upd_task_now(worker_id, task_)
                    bot.send_message(parse_mode='HTML', chat_id=worker_id,
                                     text=functions.send_task(dataBase.get_nickname(message.from_user.id),
                                                              task_), reply_markup=markup)
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</i> <b>' + str(
                                         dataBase.get_nickname(worker_id)) + '</b>')
                    dataBase.upd_can_accept(worker_id, 1)
                    dataBase.set_last_worker(message.from_user.id, worker_id)
                    return True
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<b>OOPS\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '
                                          '–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥</b>')
                    return False
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>OOPS\n–ö–∞–∂–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç</b>')
                return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–ê —Ç—ã —Ö–∏—Ç—Ä—ã–π –∂—É–∫, –Ω–µ –¥–µ–ª–∞–π —Ç–∞–∫ –±–æ–ª—å—à–µ</b>')
            return False
    except Exception as e:
        functions.error_log(e)


def handler_corp_task(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        if dataBase.is_owner(message.from_user.id):
            tmp = message.data.split('_')
            task_id = tmp[2]
            user_id = tmp[1][4:]
            if dataBase.is_free(user_id):
                markup = types.InlineKeyboardMarkup()
                key1 = types.InlineKeyboardButton(args.acceptWorkButton, callback_data='1')
                key2 = types.InlineKeyboardButton(args.cancelWorkButton, callback_data='2')
                markup.add(key1)
                markup.add(key2)
                msg = dataBase.give_corp_task(task_id, user_id)
                if msg != 'None':
                    dataBase.upd_can_accept(user_id, 1)
                    dataBase.upd_is_corp_task(user_id, 1)
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</i>')
                    bot.send_message(parse_mode='HTML', chat_id=int(user_id),
                                     text=msg, reply_markup=markup)
                    return True
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</i>')
                    return False
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç</i>')
            return False
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
    except Exception as e:
        functions.error_log(e)


def handler_me(message):  # —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –∏–Ω—Ñ–æ—Ä–∞–º—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    """
    try:
        ids = message.from_user.id
        if dataBase.is_owner(ids):
            who = '–ì–µ–Ω.–¥–∏—Ä.'
        else:
            who = '–†–∞–±–æ—Ç–Ω–∏–∫'
        company = dataBase.get_corp_name(dataBase.get_corp(ids))
        if company == '0':
            company = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        markup = inline_keyboard(message.from_user.id, False, True, False, False, False)
        check = dataBase.check_avatar(message.from_user.id)
        if check:
            params = dataBase.get_avatar_params(message.from_user.id)
            functions.generate_avatar(params[0], params[1], params[2])
            photo = open(args.tempImageName, 'rb')
        else:
            photo = open(args.avatar_directory + args.standard_avatar_file_name[0], 'rb')
        msg = '<i>–ù–∏–∫–Ω–µ–π–º: </i> <b>{5}</b>\n<i>–ü—Ä–æ—Ñ–µ—Å—Å–∏—è:</i> <b>{0}</b>\n<i>–†–∞–Ω–≥:</i> <b>{1}</b>\n<i>–ë–∞–ª–∞–Ω—Å:</i> ' \
              '<b>{2}</b>\n<i>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</i> <b>{3}</b>\n<i>–î–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –æ—Ä–≥.:</i> <b>{4}</b>'. \
            format(dataBase.get_prof(ids), dataBase.get_user_rank(ids), dataBase.get_balance(ids), company,
                   who, dataBase.get_nickname(ids))
        bot.send_photo(parse_mode='HTML', chat_id=message.from_user.id,
                       photo=photo, caption=msg, reply_markup=markup)
        photo.close()
        if check:
            os.remove(args.tempImageName)
    except Exception as e:
        print(e)
        functions.error_log(e)


def handler_tops(message):  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–ø–æ–≤
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–ø–∞
    """
    try:
        functions.log(message)
        markup = types.InlineKeyboardMarkup()
        key1 = types.InlineKeyboardButton('üí∞–¢–æ–ø –±–æ–≥–∞—á–µ–π', callback_data='/top_rich')
        key2 = types.InlineKeyboardButton('üìà–¢–æ–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π', callback_data='/top_orgs')
        markup.add(key1)
        markup.add(key2)
        bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:\n</b>',
                         reply_markup=markup)
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(commands=['a'])  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω —á–∞—Ç
def handler_a_chat(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        if functions.is_admin(message.from_user.id):
            functions.log(message)
            command = message.text.split(maxsplit=1)[1]
            for j in range(len(args.admins_list)):
                if args.admins_list[j] != message.from_user.id:
                    bot.send_message(parse_mode='HTML', chat_id=args.admins_list[j], text=str('–ê–¥–º–∏–Ω —á–∞—Ç | {0} {1}').
                                     format(dataBase.get_nickname(message.from_user.id), command))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(commands=['all'])  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–∏–π —á–∞—Ç
def handler_a_chat(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        if functions.is_admin(message.from_user.id):
            functions.log(message)
            msg = message.text.split(maxsplit=1)[1]
            users = dataBase.get_all_users()
            markup = inline_keyboard(message.from_user.id, False, False, False, False, False)
            for i in range(len(users)):
                bot.send_message(parse_mode='HTML', chat_id=users[i], text=str('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ | {0} {1}').
                                 format(dataBase.get_nickname(message.from_user.id), msg), reply_markup=markup)
    except Exception as e:
        functions.error_log(e)


def handler_uptime(message):  # —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    try:
        if functions.is_admin(message.from_user.id):
            tmp_msg = str('<b>\n–í—Ä–µ–º—è:</b> ' + str(datetime.now() - args.start_time))
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text=str(tmp_msg))
    except Exception as e:
        functions.error_log(e)


def set_avatar(message):  # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        msg = message.text.split(' ')
        if not msg[0].isnumeric() or not msg[1].isnumeric() or not msg[2].isnumeric():
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω</b>')
        elif int(msg[0]) >= len(args.head_file_name) or int(msg[1]) >= len(args.body_file_name) or \
                int(msg[2]) >= len(args.face_file_name):
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω</b>')
        else:
            dataBase.set_avatar(message.from_user.id, int(msg[0]), int(msg[1]), int(msg[2]))
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<b>–ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>')
    except Exception as e:
        print(e)
        functions.error_log(e)


@bot.callback_query_handler(func=lambda c: True)  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ inline –∫–Ω–æ–ø–æ–∫
def func(c):
    """
    :param c:
    :return: None
    """
    try:
        functions.log(c)
        if c.data == '0':
            handler_help(c)
            bot.edit_message_text(parse_mode='HTML', chat_id=c.from_user.id, message_id=c.message.message_id,
                                  text='<b>–£–∑–Ω–∞—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>', reply_markup=None)
            bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–¢—ã –ø—Ä–∏–µ–º–Ω—ã–π')
            return
        elif c.data == '1':
            if handler_accept(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–í—ã –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ù–µ–µ–µ–µ, –¥—Ä—É–∂–æ–∫, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
            return
        elif c.data == '2':
            if handler_cancel(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –≤—ã–ø–æ–ª–Ω—è—Ç—å '
                                                                                        '–∑–∞–¥–∞–Ω–∏–µ')
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ù–µ–µ–µ–µ, –¥—Ä—É–∂–æ–∫, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
            return
        elif c.data[1:5] == 'task':
            if handler_task(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
                bot.edit_message_text(parse_mode='HTML', chat_id=c.from_user.id, message_id=c.message.message_id,
                                      text=c.message.text)
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            return
        elif c.data[1:] == 'give_tsk':
            handler_give_task(c)
            return
        elif c.data[1:7] == 'invite':
            if handler_invite(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω')
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            return
        elif c.data[1:7] == 'accept':
            """
            
            –ø–æ—Ñ–∏–∫—Å–∏—Ç—å --upd —Å–ø—É—Å—Ç—è 3 –º–µ—Å—è—Ü–∞ —è –Ω–µ –ø–æ–º–Ω—é, —á—Ç–æ –Ω–∞–¥–æ –±—ã–ª–æ –ø–æ—Ñ–∏–∫—Å–∏—Ç—å
            
            """
            owner_id = int(c.data[7:])
            company = dataBase.get_corp(owner_id)
            dataBase.upd_corp(c.from_user.id, company)
            dataBase.delete_request(c.from_user.id)
            bot.send_message(parse_mode='HTML', chat_id=owner_id, text='<b>{0} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>'.
                             format(str(dataBase.get_nickname(c.from_user.id))))
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                             text='<b>–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ </b>' + str(company))
            bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
            return
        elif c.data[2:6] == 'task':
            if handler_corp_task(c):
                user_id = c.data.split('_')
                bot.edit_message_text(parse_mode='HTML', chat_id=c.from_user.id, message_id=c.message.message_id,
                                      text=c.message.text + '\n------------------\n–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ' + dataBase.
                                      get_nickname(int(user_id[1][4:])))
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ù–µ–µ–µ–µ, –¥—Ä—É–∂–æ–∫, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
            return
        elif c.data[1:9] == 'give_low':
            if dataBase.is_owner(c.from_user.id):
                ids = str(c.data[9:])
                msg, markup = dataBase.get_low(c.from_user.id, ids)
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text=msg, reply_markup=markup)
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='Success')
                return
            else:
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                 text='<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='Error')
            return
        elif c.data[1:9] == 'give_gum':
            if dataBase.is_owner(c.from_user.id):
                ids = str(c.data[9:])
                msg, markup = dataBase.get_gum(c.from_user.id, ids)
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text=msg, reply_markup=markup)
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='Success')
                return
            else:
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                 text='<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='Error')
            return
        elif c.data[1:10] == 'give_tech':
            if dataBase.is_owner(c.from_user.id):
                ids = str(c.data[10:])
                msg, markup = dataBase.get_tech(c.from_user.id, ids)
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text=msg, reply_markup=markup)
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='Success')
                return
            else:
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                 text='<b>–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='Error')
            return
        elif c.data[1:] == 'corp_members':
            try:
                msg, markup = dataBase.corp_members(c.from_user.id)
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                 text=msg, reply_markup=markup)
            except Exception as e:
                functions.error_log(e)
            return
        elif c.data[1:] == 'get_task':
            try:
                if dataBase.in_corp(c.from_user.id):
                    if dataBase.is_owner(c.from_user.id):
                        dataBase.refresh_corp_tasks(c.from_user.id)
                        msg, markup = dataBase.get_corp_task(c.from_user.id)
                        bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text=msg, reply_markup=markup)
                        return True
                    else:
                        bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                         text='<b>–í—ã –Ω–µ –≥–ª–∞–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                        return False
                else:
                    bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                     text='<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                    return False
            except Exception as e:
                functions.error_log(e)
        elif c.data[1:] == 'get_new_task':
            dataBase.refresh_corp_tasks(c.from_user.id)
            msg, markup = dataBase.get_corp_task(c.from_user.id)
            bot.edit_message_text(parse_mode='HTML', chat_id=c.from_user.id, message_id=c.message.message_id,
                                  text=msg, reply_markup=markup)
        elif c.data[1:] == 'corp_settings':
            corp_help(c.from_user.id)
            return
        elif c.data[1:] == 'top_rich':
            res = dataBase.get_top('rich')
            bot.edit_message_text(parse_mode='HTML', chat_id=c.from_user.id, message_id=c.message.message_id, text=res)
            return
        elif c.data[1:] == 'top_orgs':
            res = dataBase.get_top('orgs')
            bot.edit_message_text(parse_mode='HTML', chat_id=c.from_user.id, message_id=c.message.message_id, text=res)
            return
        elif c.data[1:] == 'toorginvite':
            try:
                if dataBase.is_owner(c.from_user.id):
                    msg, markup = dataBase.get_not_in_corp_users(c)
                    bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                     text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:\n</b>' + msg, reply_markup=markup)
                else:
                    bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                     text='<b>–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                return
            except Exception as e:
                print(e)
                functions.error_log(e)
        elif c.data[1:] == 'change_prof':
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏—é</b>')
            dataBase.give_new_prof(c.from_user.id)
            return
        elif c.data[1:] == 'change_spec':
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text=args.test_question)
            dataBase.change_spec(c.from_user.id)
            return
        elif c.data[1:] == 'leave_corp':
            if handler_leave(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—Ä–≥')
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ù–µ–µ–µ–µ, –¥—Ä—É–∂–æ–∫, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
            return
        elif c.data[1:5] == 'kick':
            if handler_kick(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω')
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ù–µ–µ–µ–µ, –¥—Ä—É–∂–æ–∫, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
            return
        elif c.data[1:] == 'change_nickname':
            try:
                nickList.append(c.from_user.id)
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text='<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫:</b>')
            except Exception as e:
                functions.error_log(e)
            return
        elif c.data[1:] == 'crt_avatar':
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text='<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤–∞—Ç–∞—Ä–∞:</b>\n'
                                                                             '<i>Head[0-{0}]\nBody[0-{1}]\n'
                                                                             'Face[0-{2}]</i>\n<b>'
                                                                             '—Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è "—á–∏—Å–ª–æ —á–∏—Å–ª–æ —á–∏—Å–ª–æ"</b>'.
                             format(len(args.head_file_name) - 1, len(args.body_file_name) - 1,
                                    len(args.face_file_name) - 1))
            avatarList.append(c.from_user.id)
            return
        elif c.data[1:] == 'change_descr':
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text='<i>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</i>')
            descriptionList.append(c.from_user.id)
            return
        elif c.data[1:] == 'change_nameCorp':
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                             text='<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</i>')
            nameOfCorpList.append(c.from_user.id)
            return
        elif c.data[1:] == 'crt_org':
            createCorpList.append(c.from_user.id)
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text='<i>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</i>')
            return
        elif c.data[1:] == 'change_owner':
            msg, markup = dataBase.change_owner(c.from_user.id)
            bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                             text=msg, reply_markup=markup)
            return
        elif c.data[1:10] == 'set_owner':
            if handler_set_owner(c):
                bot.answer_callback_query(callback_query_id=c.id, show_alert=False, text='–í–ª–∞–¥–µ–ª–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω')
            else:
                bot.answer_callback_query(callback_query_id=c.id, show_alert=True, text='–ù–µ–µ–µ–µ, –¥—Ä—É–∂–æ–∫, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç')
            bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id,
                                  text=c.message.text)
            return
        elif c.data[1:] == 'strt':
            handler_start()
            return
        elif c.data[1:] == 'remove_corp':
            try:
                markup = types.InlineKeyboardMarkup()
                company = dataBase.get_corp(c.from_user.id)
                if company == '0':
                    bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                     text='<b>–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                    return
                if dataBase.is_owner(c.from_user.id):
                    key1 = types.InlineKeyboardButton('–î–∞', callback_data='/remove_accept')
                    key2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='/remove_decline')
                    markup.add(key1, key2)
                else:
                    bot.send_message(parse_mode='HTML', chat_id=c.from_user.id,
                                     text='<b>–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</b>')
                    return
                bot.send_message(parse_mode='HTML', chat_id=c.from_user.id, text='<b>–£–¥–∞–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é?</b>',
                                 reply_markup=markup)
            except Exception as e:
                functions.error_log(e)
        elif c.data[1:] == 'ref':
            bot.send_message(chat_id=c.from_user.id, text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –ø—Ä–æ–µ–∫—Ç—É –∏ —Å–µ–±–µ: "
                                                          "https://telegram.me/" + bot.get_me().username + "?start={}"
                             .format(c.from_user.id))
            return
        elif c.data[1:] == 'remove_accept':
            members = dataBase.remove_corp(c.from_user.id)
            for i in members:
                bot.send_message(parse_mode='HTML', chat_id=i, text='<b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞</b>')
                dataBase.upd_corp(i, 0)
            bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id,
                                  text='–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞')
            return
        elif c.data[1:] == 'remove_decline':
            bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id,
                                  text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
            return
        elif c.data[1:] == 'log':
            handler_log(c)
            return
        elif c.data[1:] == 'uptime':
            handler_uptime(c)
            return
        elif c.data[1:] == 'errors':
            handler_error(c)
            return
        elif c.data[1:] == 'db':
            handler_db(c)
            return
        elif c.data[1:] == 'exit':
            handler_exit(c)
            return
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['text'])  # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handler_text(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    try:
        functions.log(message)
        if message.text == args.acceptWorkButton or message.text == args.cancelWorkButton:
            if message.text == args.acceptWorkButton:
                handler_accept(message)
                return
            elif message.text == args.cancelWorkButton:
                handler_cancel(message)
                return
        elif message.text == args.helpButtonName:
            handler_help(message)
            return
        elif message.text == args.AboutMeButtonName:
            handler_me(message)
            return
        elif message.text == args.CorpMenuButtonName:
            handler_corp_menu(message)
            return
        elif message.text == args.TopsButtonName:
            handler_tops(message)
            return
        elif message.text == args.AboutMeButtonName:
            handler_me(message)
            return
        elif message.text == args.AhelpButtonName:
            try:
                if functions.is_admin(message.from_user.id):
                    markup = inline_keyboard(message.from_user.id, False, False, True, False, False)
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n'
                                          '/a (+—Å–æ–æ–±—â–µ–Ω–∏–µ) - –ê–¥–º–∏–Ω —á–∞—Ç\n'
                                          '/all (+—Å–æ–æ–±—â–µ–Ω–∏–µ) - –°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º\n'
                                          '/change_db - –ó–∞–º–µ–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n'
                                          '/add_quest - (–ø–æ —Ñ–æ—Ä–º–∞—Ç—É /add_quest , –ø—Ä–æ—Ñ–µ—Å—Å–∏—è , –∑–∞–¥–∞–Ω–∏–µ , —Ä–∞–Ω–≥ , –≤—Ä–µ–º—è)',
                                     reply_markup=markup)
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
                return
            except Exception as e:
                functions.error_log(e)
        elif message.text in args.techList or message.text in args.gumList or message.text in args.lowList:
            if dataBase.set_profession(message, False):
                markup = inline_keyboard(message.from_user.id, False, False, False, False, False)
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<i>–í–∞—à–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è</i> <b>' + message.text + '</b>', reply_markup=markup)
                if dataBase.get_nickname(message.from_user.id) == "None":
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º </i>')
                    nickList.append(message.from_user.id)
            else:
                bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                 text='<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>')
                return
        elif message.from_user.id in args.new_prof_list:
            dataBase.set_profession(message, functions.in_prof_arr(message.text))
            markup = inline_keyboard(message.from_user.id, False, False, False, False, False)
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<i>–í–∞—à–∞ –Ω–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è</i> <b>' + message.text + '</b>', reply_markup=markup)
            return
        elif message.from_user.id in avatarList:
            index = avatarList.index(message.from_user.id)
            set_avatar(message)
            avatarList.pop(index)
            return
        elif message.from_user.id in createCorpList:
            index = createCorpList.index(message.from_user.id)
            handler_create_corp(message)
            createCorpList.pop(index)
            return
        elif message.from_user.id in descriptionList:
            index = descriptionList.index(message.from_user.id)
            handler_set_desc(message)
            descriptionList.pop(index)
            return
        elif message.from_user.id in nameOfCorpList:
            index = nameOfCorpList.index(message.from_user.id)
            handler_set_name(message)
            nameOfCorpList.pop(index)
            return
        elif message.from_user.id in nickList:
            index = nickList.index(message.from_user.id)
            dataBase.set_nickname(message)
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                             text='<i>–í–∞—à –Ω–∏–∫–Ω–µ–π–º</i> <b>' + message.text + '</b>')
            nickList.pop(index)
            return
        else:
            if dataBase.get_spec(message.from_user.id) == 'None':
                if message.text == "6":
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã ‚Äî </i><b>—Ç–µ—Ö–Ω–∞—Ä—å</b>')
                    dataBase.upd_spec(message.from_user.id, 'tech')
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    for i in args.techList:
                        user_markup.row(i)
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</i>',
                                     reply_markup=user_markup)
                    try:
                        bot.send_sticker(message.from_user.id, args.choose)
                    except Exception as e:
                        functions.error_log(e)
                    return
                elif str(message.text).isnumeric():
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–°–æ–±–æ–ª–µ–∑–Ω—É–µ–º, –≤—ã ‚Äî </i><b>–≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π</b>')
                    dataBase.upd_spec(message.from_user.id, 'gum')
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    for i in args.gumList:
                        user_markup.row(i)
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</i>',
                                     reply_markup=user_markup)
                    try:
                        bot.send_sticker(message.from_user.id, args.choose)
                    except Exception as e:
                        functions.error_log(e)
                    return
                else:
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<b>–ü–æ—Ö–æ–¥—É —É –≤–∞—Å —Å –≥–æ–ª–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã</b>')
                    dataBase.upd_spec(message.from_user.id, "low")
                    user_markup = telebot.types.ReplyKeyboardMarkup(True, False)
                    for i in args.lowList:
                        user_markup.row(i)
                    bot.send_message(parse_mode='HTML', chat_id=message.from_user.id,
                                     text='<i>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–π</i>',
                                     reply_markup=user_markup)
                    try:
                        bot.send_sticker(message.from_user.id, args.choose)
                    except Exception as e:
                        functions.error_log(e)
                    return
            else:
                bot.send_message(message.from_user.id, message.text)
                return
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['photo'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    """
    try:
        functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['contact'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    """
    try:
        functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['sticker'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
    """
    try:
        if not functions.is_admin(message.from_user.id):
            functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
        else:
            file_info = bot.get_file(message.sticker.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            print(downloaded_file)
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['voice'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    """
    try:
        functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['location'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    """
    try:
        functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['audio'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    """
    try:
        functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['video'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
    """
    try:
        functions.wrong_input(message.from_user.id, dataBase.get_spec(message.from_user.id))
    except Exception as e:
        functions.error_log(e)


@bot.message_handler(content_types=['document'])
def handler_photo(message):
    """
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
    """
    try:
        functions.log(message)
        if functions.is_admin(message.from_user.id):
            args.change_db.pop(args.change_db.index(message.from_user.id))
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(args.databaseName, 'wb') as file:
                file.write(downloaded_file)
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<i>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–µ–Ω–∞</i>')
        else:
            bot.send_message(parse_mode='HTML', chat_id=message.from_user.id, text='<i>–û—Ç–∫–∞–∑–∞–Ω–æ, —Å—É–∫–∞, –≤ –¥–æ—Å—Ç—É–ø–µ</i>')
    except Exception as e:
        functions.error_log(e)


try:  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–∑–∞ —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    while True:
        t = threading.Thread(target=loopWork.timer, name='timer')  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ timer
        t.start()  # –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        try:
            bot.polling(none_stop=True, interval=0)  # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        except Exception as er:
            functions.error_log(er)
        threading.active_count()
except Exception as er:
    functions.error_log(er)
